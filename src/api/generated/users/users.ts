/**
 * Generated by orval v7.13.2 游꽄
 * Do not edit manually.
 * CRM API GetMoto
 * API para gest칚o de oficina de motos - Sistema de CRM completo
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiUsers200Item,
  PutApiUsersIdBody
} from '.././models';

import { customAxiosInstance } from '../../axios-instance';




/**
 * Retorna lista de todos os usu치rios do sistema (sem senha)
 * @summary Listar todos os usu치rios
 */
export const getApiUsers = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<GetApiUsers200Item[]>(
      {url: `/api/users`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiUsersQueryKey = () => {
    return [
    `/api/users`
    ] as const;
    }

    
export const getGetApiUsersQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsers>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({ signal }) => getApiUsers(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsers>>>
export type GetApiUsersQueryError = void


export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsers>>,
          TError,
          Awaited<ReturnType<typeof getApiUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Listar todos os usu치rios
 */

export function useGetApiUsers<TData = Awaited<ReturnType<typeof getApiUsers>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retorna dados de um usu치rio espec칤fico
 * @summary Buscar usu치rio por ID
 */
export const getApiUsersId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/users/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiUsersIdQueryKey = (id?: string,) => {
    return [
    `/api/users/${id}`
    ] as const;
    }

    
export const getGetApiUsersIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = void | void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersId>>> = ({ signal }) => getApiUsersId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersId>>>
export type GetApiUsersIdQueryError = void | void


export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = void | void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar usu치rio por ID
 */

export function useGetApiUsersId<TData = Awaited<ReturnType<typeof getApiUsersId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Atualiza dados de um usu치rio (apenas ADMIN e MANAGER)
 * @summary Atualizar usu치rio
 */
export const putApiUsersId = (
    id: string,
    putApiUsersIdBody: PutApiUsersIdBody,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiUsersIdBody
    },
      );
    }
  


export const getPutApiUsersIdMutationOptions = <TError = void | void | void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersId>>, TError,{id: string;data: PutApiUsersIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiUsersId>>, TError,{id: string;data: PutApiUsersIdBody}, TContext> => {

const mutationKey = ['putApiUsersId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiUsersId>>, {id: string;data: PutApiUsersIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiUsersId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiUsersId>>>
    export type PutApiUsersIdMutationBody = PutApiUsersIdBody
    export type PutApiUsersIdMutationError = void | void | void | void | void

    /**
 * @summary Atualizar usu치rio
 */
export const usePutApiUsersId = <TError = void | void | void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiUsersId>>, TError,{id: string;data: PutApiUsersIdBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiUsersId>>,
        TError,
        {id: string;data: PutApiUsersIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiUsersIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Remove um usu치rio do sistema (apenas ADMIN)
 * @summary Deletar usu치rio
 */
export const deleteApiUsersId = (
    id: string,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/users/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiUsersIdMutationOptions = <TError = void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiUsersId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiUsersId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiUsersId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiUsersId>>>
    
    export type DeleteApiUsersIdMutationError = void | void | void

    /**
 * @summary Deletar usu치rio
 */
export const useDeleteApiUsersId = <TError = void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiUsersId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiUsersId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiUsersIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    