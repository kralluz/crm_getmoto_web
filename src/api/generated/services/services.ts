/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * CRM API GetMoto
 * API para gest√£o de oficina de motos - Sistema de CRM completo
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiServicesParams,
  PostApiServicesBody,
  PutApiServicesIdBody
} from '.././models';

import { customAxiosInstance } from '../../axios-instance';




/**
 * Registra uma nova ordem de servi√ßo para uma moto
 * @summary Criar nova ordem de servi√ßo
 */
export const postApiServices = (
    postApiServicesBody: PostApiServicesBody,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/services`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiServicesBody, signal
    },
      );
    }
  


export const getPostApiServicesMutationOptions = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiServices>>, TError,{data: PostApiServicesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiServices>>, TError,{data: PostApiServicesBody}, TContext> => {

const mutationKey = ['postApiServices'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiServices>>, {data: PostApiServicesBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiServices(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiServicesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiServices>>>
    export type PostApiServicesMutationBody = PostApiServicesBody
    export type PostApiServicesMutationError = void | void

    /**
 * @summary Criar nova ordem de servi√ßo
 */
export const usePostApiServices = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiServices>>, TError,{data: PostApiServicesBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiServices>>,
        TError,
        {data: PostApiServicesBody},
        TContext
      > => {

      const mutationOptions = getPostApiServicesMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retorna lista de servi√ßos com filtros opcionais
 * @summary Listar ordens de servi√ßo
 */
export const getApiServices = (
    params?: GetApiServicesParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/services`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiServicesQueryKey = (params?: GetApiServicesParams,) => {
    return [
    `/api/services`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiServicesQueryOptions = <TData = Awaited<ReturnType<typeof getApiServices>>, TError = void>(params?: GetApiServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServices>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiServicesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiServices>>> = ({ signal }) => getApiServices(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiServices>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiServicesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiServices>>>
export type GetApiServicesQueryError = void


export function useGetApiServices<TData = Awaited<ReturnType<typeof getApiServices>>, TError = void>(
 params: undefined |  GetApiServicesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServices>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiServices>>,
          TError,
          Awaited<ReturnType<typeof getApiServices>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiServices<TData = Awaited<ReturnType<typeof getApiServices>>, TError = void>(
 params?: GetApiServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServices>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiServices>>,
          TError,
          Awaited<ReturnType<typeof getApiServices>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiServices<TData = Awaited<ReturnType<typeof getApiServices>>, TError = void>(
 params?: GetApiServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServices>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Listar ordens de servi√ßo
 */

export function useGetApiServices<TData = Awaited<ReturnType<typeof getApiServices>>, TError = void>(
 params?: GetApiServicesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServices>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiServicesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retorna dados detalhados de uma ordem de servi√ßo
 * @summary Buscar servi√ßo por ID
 */
export const getApiServicesId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/services/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiServicesIdQueryKey = (id?: string,) => {
    return [
    `/api/services/${id}`
    ] as const;
    }

    
export const getGetApiServicesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiServicesId>>, TError = void | void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServicesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiServicesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiServicesId>>> = ({ signal }) => getApiServicesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiServicesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiServicesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiServicesId>>>
export type GetApiServicesIdQueryError = void | void


export function useGetApiServicesId<TData = Awaited<ReturnType<typeof getApiServicesId>>, TError = void | void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServicesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiServicesId>>,
          TError,
          Awaited<ReturnType<typeof getApiServicesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiServicesId<TData = Awaited<ReturnType<typeof getApiServicesId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServicesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiServicesId>>,
          TError,
          Awaited<ReturnType<typeof getApiServicesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiServicesId<TData = Awaited<ReturnType<typeof getApiServicesId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServicesId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar servi√ßo por ID
 */

export function useGetApiServicesId<TData = Awaited<ReturnType<typeof getApiServicesId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServicesId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiServicesIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Atualiza dados de uma ordem de servi√ßo existente
 * @summary Atualizar ordem de servi√ßo
 */
export const putApiServicesId = (
    id: string,
    putApiServicesIdBody: PutApiServicesIdBody,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/services/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiServicesIdBody
    },
      );
    }
  


export const getPutApiServicesIdMutationOptions = <TError = void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiServicesId>>, TError,{id: string;data: PutApiServicesIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiServicesId>>, TError,{id: string;data: PutApiServicesIdBody}, TContext> => {

const mutationKey = ['putApiServicesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiServicesId>>, {id: string;data: PutApiServicesIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiServicesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiServicesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiServicesId>>>
    export type PutApiServicesIdMutationBody = PutApiServicesIdBody
    export type PutApiServicesIdMutationError = void | void | void

    /**
 * @summary Atualizar ordem de servi√ßo
 */
export const usePutApiServicesId = <TError = void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiServicesId>>, TError,{id: string;data: PutApiServicesIdBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiServicesId>>,
        TError,
        {id: string;data: PutApiServicesIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiServicesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Remove uma ordem de servi√ßo do sistema
 * @summary Deletar ordem de servi√ßo
 */
export const deleteApiServicesId = (
    id: string,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/services/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiServicesIdMutationOptions = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiServicesId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiServicesId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiServicesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiServicesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiServicesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiServicesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiServicesId>>>
    
    export type DeleteApiServicesIdMutationError = void | void

    /**
 * @summary Deletar ordem de servi√ßo
 */
export const useDeleteApiServicesId = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiServicesId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiServicesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiServicesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    