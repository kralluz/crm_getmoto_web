/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * CRM API GetMoto
 * API para gest√£o de oficina de motos - Sistema de CRM completo
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiVehiclesParams,
  PostApiVehiclesBody,
  PutApiVehiclesIdBody
} from '.././models';

import { customAxiosInstance } from '../../axios-instance';




/**
 * Cadastra um novo ve√≠culo (moto) no sistema
 * @summary Criar novo ve√≠culo
 */
export const postApiVehicles = (
    postApiVehiclesBody: PostApiVehiclesBody,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/vehicles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiVehiclesBody, signal
    },
      );
    }
  


export const getPostApiVehiclesMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiVehicles>>, TError,{data: PostApiVehiclesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiVehicles>>, TError,{data: PostApiVehiclesBody}, TContext> => {

const mutationKey = ['postApiVehicles'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiVehicles>>, {data: PostApiVehiclesBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiVehicles(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiVehiclesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiVehicles>>>
    export type PostApiVehiclesMutationBody = PostApiVehiclesBody
    export type PostApiVehiclesMutationError = void

    /**
 * @summary Criar novo ve√≠culo
 */
export const usePostApiVehicles = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiVehicles>>, TError,{data: PostApiVehiclesBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiVehicles>>,
        TError,
        {data: PostApiVehiclesBody},
        TContext
      > => {

      const mutationOptions = getPostApiVehiclesMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retorna lista de ve√≠culos com filtros opcionais
 * @summary Listar todos os ve√≠culos
 */
export const getApiVehicles = (
    params?: GetApiVehiclesParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/vehicles`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiVehiclesQueryKey = (params?: GetApiVehiclesParams,) => {
    return [
    `/api/vehicles`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiVehiclesQueryOptions = <TData = Awaited<ReturnType<typeof getApiVehicles>>, TError = unknown>(params?: GetApiVehiclesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVehicles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiVehiclesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiVehicles>>> = ({ signal }) => getApiVehicles(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiVehicles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiVehiclesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiVehicles>>>
export type GetApiVehiclesQueryError = unknown


export function useGetApiVehicles<TData = Awaited<ReturnType<typeof getApiVehicles>>, TError = unknown>(
 params: undefined |  GetApiVehiclesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVehicles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVehicles>>,
          TError,
          Awaited<ReturnType<typeof getApiVehicles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVehicles<TData = Awaited<ReturnType<typeof getApiVehicles>>, TError = unknown>(
 params?: GetApiVehiclesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVehicles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVehicles>>,
          TError,
          Awaited<ReturnType<typeof getApiVehicles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVehicles<TData = Awaited<ReturnType<typeof getApiVehicles>>, TError = unknown>(
 params?: GetApiVehiclesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVehicles>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Listar todos os ve√≠culos
 */

export function useGetApiVehicles<TData = Awaited<ReturnType<typeof getApiVehicles>>, TError = unknown>(
 params?: GetApiVehiclesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVehicles>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiVehiclesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retorna um ve√≠culo espec√≠fico com suas ordens de servi√ßo
 * @summary Buscar ve√≠culo por ID
 */
export const getApiVehiclesId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/vehicles/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiVehiclesIdQueryKey = (id?: string,) => {
    return [
    `/api/vehicles/${id}`
    ] as const;
    }

    
export const getGetApiVehiclesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiVehiclesId>>, TError = void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVehiclesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiVehiclesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiVehiclesId>>> = ({ signal }) => getApiVehiclesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiVehiclesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiVehiclesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiVehiclesId>>>
export type GetApiVehiclesIdQueryError = void


export function useGetApiVehiclesId<TData = Awaited<ReturnType<typeof getApiVehiclesId>>, TError = void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVehiclesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVehiclesId>>,
          TError,
          Awaited<ReturnType<typeof getApiVehiclesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVehiclesId<TData = Awaited<ReturnType<typeof getApiVehiclesId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVehiclesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiVehiclesId>>,
          TError,
          Awaited<ReturnType<typeof getApiVehiclesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiVehiclesId<TData = Awaited<ReturnType<typeof getApiVehiclesId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVehiclesId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar ve√≠culo por ID
 */

export function useGetApiVehiclesId<TData = Awaited<ReturnType<typeof getApiVehiclesId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiVehiclesId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiVehiclesIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Atualiza os dados de um ve√≠culo
 * @summary Atualizar ve√≠culo
 */
export const putApiVehiclesId = (
    id: string,
    putApiVehiclesIdBody: PutApiVehiclesIdBody,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/vehicles/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiVehiclesIdBody
    },
      );
    }
  


export const getPutApiVehiclesIdMutationOptions = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiVehiclesId>>, TError,{id: string;data: PutApiVehiclesIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiVehiclesId>>, TError,{id: string;data: PutApiVehiclesIdBody}, TContext> => {

const mutationKey = ['putApiVehiclesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiVehiclesId>>, {id: string;data: PutApiVehiclesIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiVehiclesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiVehiclesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiVehiclesId>>>
    export type PutApiVehiclesIdMutationBody = PutApiVehiclesIdBody
    export type PutApiVehiclesIdMutationError = void | void

    /**
 * @summary Atualizar ve√≠culo
 */
export const usePutApiVehiclesId = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiVehiclesId>>, TError,{id: string;data: PutApiVehiclesIdBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiVehiclesId>>,
        TError,
        {id: string;data: PutApiVehiclesIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiVehiclesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Desativa um ve√≠culo (soft delete)
 * @summary Deletar ve√≠culo
 */
export const deleteApiVehiclesId = (
    id: string,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/vehicles/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiVehiclesIdMutationOptions = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiVehiclesId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiVehiclesId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiVehiclesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiVehiclesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiVehiclesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiVehiclesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiVehiclesId>>>
    
    export type DeleteApiVehiclesIdMutationError = void | void

    /**
 * @summary Deletar ve√≠culo
 */
export const useDeleteApiVehiclesId = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiVehiclesId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiVehiclesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiVehiclesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    