/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * CRM API GetMoto
 * API para gestão de oficina de motos - Sistema de CRM completo
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customAxiosInstance } from '../../axios-instance';




export const postRegister = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/register`, method: 'POST', signal
    },
      );
    }
  


export const getPostRegisterMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRegister>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postRegister>>, TError,void, TContext> => {

const mutationKey = ['postRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRegister>>, void> = () => {
          

          return  postRegister()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postRegister>>>
    
    export type PostRegisterMutationError = void

    export const usePostRegister = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRegister>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postRegister>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostRegisterMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const postLogin = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/login`, method: 'POST', signal
    },
      );
    }
  


export const getPostLoginMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError,void, TContext> => {

const mutationKey = ['postLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLogin>>, void> = () => {
          

          return  postLogin()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postLogin>>>
    
    export type PostLoginMutationError = void

    export const usePostLogin = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postLogin>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostLoginMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const getMe = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/me`, method: 'GET', signal
    },
      );
    }
  



export const getGetMeQueryKey = () => {
    return [
    `/me`
    ] as const;
    }

    
export const getGetMeQueryOptions = <TData = Awaited<ReturnType<typeof getMe>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMe>>> = ({ signal }) => getMe(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>
export type GetMeQueryError = void


export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          Awaited<ReturnType<typeof getMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          Awaited<ReturnType<typeof getMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMeQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const get = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  



export const getGetQueryKey = () => {
    return [
    `/`
    ] as const;
    }

    
export const getGetQueryOptions = <TData = Awaited<ReturnType<typeof get>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>
export type GetQueryError = void


export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof get>>,
          TError,
          Awaited<ReturnType<typeof get>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof get>>,
          TError,
          Awaited<ReturnType<typeof get>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const post = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/`, method: 'POST', signal
    },
      );
    }
  


export const getPostMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof post>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof post>>, TError,void, TContext> => {

const mutationKey = ['post'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof post>>, void> = () => {
          

          return  post()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMutationResult = NonNullable<Awaited<ReturnType<typeof post>>>
    
    export type PostMutationError = void

    export const usePost = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof post>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof post>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const getId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetIdQueryKey = (id?: string,) => {
    return [
    `/${id}`
    ] as const;
    }

    
export const getGetIdQueryOptions = <TData = Awaited<ReturnType<typeof getId>>, TError = void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getId>>> = ({ signal }) => getId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetIdQueryResult = NonNullable<Awaited<ReturnType<typeof getId>>>
export type GetIdQueryError = void


export function useGetId<TData = Awaited<ReturnType<typeof getId>>, TError = void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getId>>,
          TError,
          Awaited<ReturnType<typeof getId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetId<TData = Awaited<ReturnType<typeof getId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getId>>,
          TError,
          Awaited<ReturnType<typeof getId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetId<TData = Awaited<ReturnType<typeof getId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetId<TData = Awaited<ReturnType<typeof getId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putId = (
    id: string,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/${id}`, method: 'PUT'
    },
      );
    }
  


export const getPutIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putId>>, TError,{id: string}, TContext> => {

const mutationKey = ['putId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  putId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutIdMutationResult = NonNullable<Awaited<ReturnType<typeof putId>>>
    
    export type PutIdMutationError = void

    export const usePutId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPutIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const deleteId = (
    id: string,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteIdMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteId>>>
    
    export type DeleteIdMutationError = void

    export const useDeleteId = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const postStockMovements = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/stock/movements`, method: 'POST', signal
    },
      );
    }
  


export const getPostStockMovementsMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStockMovements>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postStockMovements>>, TError,void, TContext> => {

const mutationKey = ['postStockMovements'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStockMovements>>, void> = () => {
          

          return  postStockMovements()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStockMovementsMutationResult = NonNullable<Awaited<ReturnType<typeof postStockMovements>>>
    
    export type PostStockMovementsMutationError = void

    export const usePostStockMovements = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStockMovements>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postStockMovements>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostStockMovementsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const getStockMovements = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/stock/movements`, method: 'GET', signal
    },
      );
    }
  



export const getGetStockMovementsQueryKey = () => {
    return [
    `/stock/movements`
    ] as const;
    }

    
export const getGetStockMovementsQueryOptions = <TData = Awaited<ReturnType<typeof getStockMovements>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStockMovements>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStockMovementsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStockMovements>>> = ({ signal }) => getStockMovements(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStockMovements>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStockMovementsQueryResult = NonNullable<Awaited<ReturnType<typeof getStockMovements>>>
export type GetStockMovementsQueryError = void


export function useGetStockMovements<TData = Awaited<ReturnType<typeof getStockMovements>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStockMovements>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStockMovements>>,
          TError,
          Awaited<ReturnType<typeof getStockMovements>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStockMovements<TData = Awaited<ReturnType<typeof getStockMovements>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStockMovements>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStockMovements>>,
          TError,
          Awaited<ReturnType<typeof getStockMovements>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStockMovements<TData = Awaited<ReturnType<typeof getStockMovements>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStockMovements>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetStockMovements<TData = Awaited<ReturnType<typeof getStockMovements>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStockMovements>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStockMovementsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSummary = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/summary`, method: 'GET', signal
    },
      );
    }
  



export const getGetSummaryQueryKey = () => {
    return [
    `/summary`
    ] as const;
    }

    
export const getGetSummaryQueryOptions = <TData = Awaited<ReturnType<typeof getSummary>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSummary>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSummaryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSummary>>> = ({ signal }) => getSummary(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSummary>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof getSummary>>>
export type GetSummaryQueryError = void


export function useGetSummary<TData = Awaited<ReturnType<typeof getSummary>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSummary>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSummary>>,
          TError,
          Awaited<ReturnType<typeof getSummary>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSummary<TData = Awaited<ReturnType<typeof getSummary>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSummary>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSummary>>,
          TError,
          Awaited<ReturnType<typeof getSummary>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSummary<TData = Awaited<ReturnType<typeof getSummary>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSummary>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSummary<TData = Awaited<ReturnType<typeof getSummary>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSummary>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSummaryQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSummaryCategories = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/summary/categories`, method: 'GET', signal
    },
      );
    }
  



export const getGetSummaryCategoriesQueryKey = () => {
    return [
    `/summary/categories`
    ] as const;
    }

    
export const getGetSummaryCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getSummaryCategories>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSummaryCategories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSummaryCategoriesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSummaryCategories>>> = ({ signal }) => getSummaryCategories(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSummaryCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSummaryCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getSummaryCategories>>>
export type GetSummaryCategoriesQueryError = void


export function useGetSummaryCategories<TData = Awaited<ReturnType<typeof getSummaryCategories>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSummaryCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSummaryCategories>>,
          TError,
          Awaited<ReturnType<typeof getSummaryCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSummaryCategories<TData = Awaited<ReturnType<typeof getSummaryCategories>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSummaryCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSummaryCategories>>,
          TError,
          Awaited<ReturnType<typeof getSummaryCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSummaryCategories<TData = Awaited<ReturnType<typeof getSummaryCategories>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSummaryCategories>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSummaryCategories<TData = Awaited<ReturnType<typeof getSummaryCategories>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSummaryCategories>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSummaryCategoriesQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



