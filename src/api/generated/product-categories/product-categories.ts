/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * CRM API GetMoto
 * API para gestão de oficina de motos - Sistema de CRM completo
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiProductCategoriesParams,
  PostApiProductCategoriesBody,
  PutApiProductCategoriesIdBody
} from '.././models';

import { customAxiosInstance } from '../../axios-instance';




/**
 * Cadastra uma nova categoria de produto
 * @summary Criar nova categoria de produto
 */
export const postApiProductCategories = (
    postApiProductCategoriesBody: PostApiProductCategoriesBody,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/product-categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiProductCategoriesBody, signal
    },
      );
    }
  


export const getPostApiProductCategoriesMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProductCategories>>, TError,{data: PostApiProductCategoriesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiProductCategories>>, TError,{data: PostApiProductCategoriesBody}, TContext> => {

const mutationKey = ['postApiProductCategories'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProductCategories>>, {data: PostApiProductCategoriesBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiProductCategories(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiProductCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProductCategories>>>
    export type PostApiProductCategoriesMutationBody = PostApiProductCategoriesBody
    export type PostApiProductCategoriesMutationError = void

    /**
 * @summary Criar nova categoria de produto
 */
export const usePostApiProductCategories = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProductCategories>>, TError,{data: PostApiProductCategoriesBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiProductCategories>>,
        TError,
        {data: PostApiProductCategoriesBody},
        TContext
      > => {

      const mutationOptions = getPostApiProductCategoriesMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retorna lista de categorias de produtos
 * @summary Listar todas as categorias de produtos
 */
export const getApiProductCategories = (
    params?: GetApiProductCategoriesParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/product-categories`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiProductCategoriesQueryKey = (params?: GetApiProductCategoriesParams,) => {
    return [
    `/api/product-categories`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiProductCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductCategories>>, TError = unknown>(params?: GetApiProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductCategories>>> = ({ signal }) => getApiProductCategories(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductCategories>>>
export type GetApiProductCategoriesQueryError = unknown


export function useGetApiProductCategories<TData = Awaited<ReturnType<typeof getApiProductCategories>>, TError = unknown>(
 params: undefined |  GetApiProductCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductCategories>>,
          TError,
          Awaited<ReturnType<typeof getApiProductCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductCategories<TData = Awaited<ReturnType<typeof getApiProductCategories>>, TError = unknown>(
 params?: GetApiProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductCategories>>,
          TError,
          Awaited<ReturnType<typeof getApiProductCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductCategories<TData = Awaited<ReturnType<typeof getApiProductCategories>>, TError = unknown>(
 params?: GetApiProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategories>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Listar todas as categorias de produtos
 */

export function useGetApiProductCategories<TData = Awaited<ReturnType<typeof getApiProductCategories>>, TError = unknown>(
 params?: GetApiProductCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategories>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retorna uma categoria específica
 * @summary Buscar categoria por ID
 */
export const getApiProductCategoriesId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/product-categories/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiProductCategoriesIdQueryKey = (id?: string,) => {
    return [
    `/api/product-categories/${id}`
    ] as const;
    }

    
export const getGetApiProductCategoriesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError = void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductCategoriesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductCategoriesId>>> = ({ signal }) => getApiProductCategoriesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductCategoriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductCategoriesId>>>
export type GetApiProductCategoriesIdQueryError = void


export function useGetApiProductCategoriesId<TData = Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError = void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductCategoriesId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductCategoriesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductCategoriesId<TData = Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductCategoriesId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductCategoriesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductCategoriesId<TData = Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar categoria por ID
 */

export function useGetApiProductCategoriesId<TData = Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductCategoriesIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Atualiza os dados de uma categoria
 * @summary Atualizar categoria de produto
 */
export const putApiProductCategoriesId = (
    id: string,
    putApiProductCategoriesIdBody: PutApiProductCategoriesIdBody,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/product-categories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiProductCategoriesIdBody
    },
      );
    }
  


export const getPutApiProductCategoriesIdMutationOptions = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductCategoriesId>>, TError,{id: string;data: PutApiProductCategoriesIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiProductCategoriesId>>, TError,{id: string;data: PutApiProductCategoriesIdBody}, TContext> => {

const mutationKey = ['putApiProductCategoriesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiProductCategoriesId>>, {id: string;data: PutApiProductCategoriesIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiProductCategoriesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiProductCategoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiProductCategoriesId>>>
    export type PutApiProductCategoriesIdMutationBody = PutApiProductCategoriesIdBody
    export type PutApiProductCategoriesIdMutationError = void | void

    /**
 * @summary Atualizar categoria de produto
 */
export const usePutApiProductCategoriesId = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductCategoriesId>>, TError,{id: string;data: PutApiProductCategoriesIdBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiProductCategoriesId>>,
        TError,
        {id: string;data: PutApiProductCategoriesIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiProductCategoriesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Desativa uma categoria (soft delete)
 * @summary Deletar categoria de produto
 */
export const deleteApiProductCategoriesId = (
    id: string,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/product-categories/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiProductCategoriesIdMutationOptions = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductCategoriesId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductCategoriesId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiProductCategoriesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiProductCategoriesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiProductCategoriesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiProductCategoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiProductCategoriesId>>>
    
    export type DeleteApiProductCategoriesIdMutationError = void | void

    /**
 * @summary Deletar categoria de produto
 */
export const useDeleteApiProductCategoriesId = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductCategoriesId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiProductCategoriesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiProductCategoriesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retorna categoria com estatísticas de produtos
 * @summary Buscar categoria com estatísticas
 */
export const getApiProductCategoriesIdStats = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/product-categories/${id}/stats`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiProductCategoriesIdStatsQueryKey = (id?: string,) => {
    return [
    `/api/product-categories/${id}/stats`
    ] as const;
    }

    
export const getGetApiProductCategoriesIdStatsQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError = void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductCategoriesIdStatsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>> = ({ signal }) => getApiProductCategoriesIdStats(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductCategoriesIdStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>>
export type GetApiProductCategoriesIdStatsQueryError = void


export function useGetApiProductCategoriesIdStats<TData = Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError = void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>,
          TError,
          Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductCategoriesIdStats<TData = Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>,
          TError,
          Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductCategoriesIdStats<TData = Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar categoria com estatísticas
 */

export function useGetApiProductCategoriesIdStats<TData = Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductCategoriesIdStats>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductCategoriesIdStatsQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



