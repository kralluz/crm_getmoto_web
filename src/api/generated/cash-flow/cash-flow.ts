/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * CRM API GetMoto
 * API para gestão de oficina de motos - Sistema de CRM completo
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiCashflowParams,
  GetApiCashflowSummary200,
  GetApiCashflowSummaryCategories200Item,
  GetApiCashflowSummaryCategoriesParams,
  GetApiCashflowSummaryParams,
  PostApiCashflowBody,
  PutApiCashflowIdBody
} from '.././models';

import { customAxiosInstance } from '../../axios-instance';




/**
 * Adiciona uma nova entrada ou saída no fluxo de caixa (apenas ADMIN e MANAGER)
 * @summary Criar registro de fluxo de caixa
 */
export const postApiCashflow = (
    postApiCashflowBody: PostApiCashflowBody,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/cashflow`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiCashflowBody, signal
    },
      );
    }
  


export const getPostApiCashflowMutationOptions = <TError = void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCashflow>>, TError,{data: PostApiCashflowBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiCashflow>>, TError,{data: PostApiCashflowBody}, TContext> => {

const mutationKey = ['postApiCashflow'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCashflow>>, {data: PostApiCashflowBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiCashflow(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiCashflowMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCashflow>>>
    export type PostApiCashflowMutationBody = PostApiCashflowBody
    export type PostApiCashflowMutationError = void | void | void

    /**
 * @summary Criar registro de fluxo de caixa
 */
export const usePostApiCashflow = <TError = void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCashflow>>, TError,{data: PostApiCashflowBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiCashflow>>,
        TError,
        {data: PostApiCashflowBody},
        TContext
      > => {

      const mutationOptions = getPostApiCashflowMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retorna lista de transações com filtros opcionais
 * @summary Listar registros de fluxo de caixa
 */
export const getApiCashflow = (
    params?: GetApiCashflowParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/cashflow`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiCashflowQueryKey = (params?: GetApiCashflowParams,) => {
    return [
    `/api/cashflow`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiCashflowQueryOptions = <TData = Awaited<ReturnType<typeof getApiCashflow>>, TError = void>(params?: GetApiCashflowParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflow>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCashflowQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCashflow>>> = ({ signal }) => getApiCashflow(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCashflow>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCashflowQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCashflow>>>
export type GetApiCashflowQueryError = void


export function useGetApiCashflow<TData = Awaited<ReturnType<typeof getApiCashflow>>, TError = void>(
 params: undefined |  GetApiCashflowParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflow>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashflow>>,
          TError,
          Awaited<ReturnType<typeof getApiCashflow>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCashflow<TData = Awaited<ReturnType<typeof getApiCashflow>>, TError = void>(
 params?: GetApiCashflowParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflow>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashflow>>,
          TError,
          Awaited<ReturnType<typeof getApiCashflow>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCashflow<TData = Awaited<ReturnType<typeof getApiCashflow>>, TError = void>(
 params?: GetApiCashflowParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflow>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Listar registros de fluxo de caixa
 */

export function useGetApiCashflow<TData = Awaited<ReturnType<typeof getApiCashflow>>, TError = void>(
 params?: GetApiCashflowParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflow>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCashflowQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retorna resumo geral do fluxo de caixa (total de entradas, saídas e saldo)
 * @summary Resumo financeiro
 */
export const getApiCashflowSummary = (
    params?: GetApiCashflowSummaryParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<GetApiCashflowSummary200>(
      {url: `/api/cashflow/summary`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiCashflowSummaryQueryKey = (params?: GetApiCashflowSummaryParams,) => {
    return [
    `/api/cashflow/summary`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiCashflowSummaryQueryOptions = <TData = Awaited<ReturnType<typeof getApiCashflowSummary>>, TError = void>(params?: GetApiCashflowSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummary>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCashflowSummaryQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCashflowSummary>>> = ({ signal }) => getApiCashflowSummary(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummary>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCashflowSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCashflowSummary>>>
export type GetApiCashflowSummaryQueryError = void


export function useGetApiCashflowSummary<TData = Awaited<ReturnType<typeof getApiCashflowSummary>>, TError = void>(
 params: undefined |  GetApiCashflowSummaryParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummary>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashflowSummary>>,
          TError,
          Awaited<ReturnType<typeof getApiCashflowSummary>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCashflowSummary<TData = Awaited<ReturnType<typeof getApiCashflowSummary>>, TError = void>(
 params?: GetApiCashflowSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummary>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashflowSummary>>,
          TError,
          Awaited<ReturnType<typeof getApiCashflowSummary>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCashflowSummary<TData = Awaited<ReturnType<typeof getApiCashflowSummary>>, TError = void>(
 params?: GetApiCashflowSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummary>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Resumo financeiro
 */

export function useGetApiCashflowSummary<TData = Awaited<ReturnType<typeof getApiCashflowSummary>>, TError = void>(
 params?: GetApiCashflowSummaryParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummary>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCashflowSummaryQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retorna resumo agrupado por categoria
 * @summary Resumo por categorias
 */
export const getApiCashflowSummaryCategories = (
    params?: GetApiCashflowSummaryCategoriesParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<GetApiCashflowSummaryCategories200Item[]>(
      {url: `/api/cashflow/summary/categories`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiCashflowSummaryCategoriesQueryKey = (params?: GetApiCashflowSummaryCategoriesParams,) => {
    return [
    `/api/cashflow/summary/categories`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiCashflowSummaryCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError = void>(params?: GetApiCashflowSummaryCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCashflowSummaryCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>> = ({ signal }) => getApiCashflowSummaryCategories(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCashflowSummaryCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>>
export type GetApiCashflowSummaryCategoriesQueryError = void


export function useGetApiCashflowSummaryCategories<TData = Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError = void>(
 params: undefined |  GetApiCashflowSummaryCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>,
          TError,
          Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCashflowSummaryCategories<TData = Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError = void>(
 params?: GetApiCashflowSummaryCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>,
          TError,
          Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCashflowSummaryCategories<TData = Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError = void>(
 params?: GetApiCashflowSummaryCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Resumo por categorias
 */

export function useGetApiCashflowSummaryCategories<TData = Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError = void>(
 params?: GetApiCashflowSummaryCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowSummaryCategories>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCashflowSummaryCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retorna dados detalhados de um registro de fluxo de caixa
 * @summary Buscar registro por ID
 */
export const getApiCashflowId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/cashflow/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiCashflowIdQueryKey = (id?: string,) => {
    return [
    `/api/cashflow/${id}`
    ] as const;
    }

    
export const getGetApiCashflowIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCashflowId>>, TError = void | void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCashflowIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCashflowId>>> = ({ signal }) => getApiCashflowId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCashflowIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCashflowId>>>
export type GetApiCashflowIdQueryError = void | void


export function useGetApiCashflowId<TData = Awaited<ReturnType<typeof getApiCashflowId>>, TError = void | void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashflowId>>,
          TError,
          Awaited<ReturnType<typeof getApiCashflowId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCashflowId<TData = Awaited<ReturnType<typeof getApiCashflowId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashflowId>>,
          TError,
          Awaited<ReturnType<typeof getApiCashflowId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCashflowId<TData = Awaited<ReturnType<typeof getApiCashflowId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar registro por ID
 */

export function useGetApiCashflowId<TData = Awaited<ReturnType<typeof getApiCashflowId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCashflowId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCashflowIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Atualiza dados de um registro de fluxo de caixa (apenas ADMIN e MANAGER)
 * @summary Atualizar registro
 */
export const putApiCashflowId = (
    id: string,
    putApiCashflowIdBody: PutApiCashflowIdBody,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/cashflow/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiCashflowIdBody
    },
      );
    }
  


export const getPutApiCashflowIdMutationOptions = <TError = void | void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCashflowId>>, TError,{id: string;data: PutApiCashflowIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiCashflowId>>, TError,{id: string;data: PutApiCashflowIdBody}, TContext> => {

const mutationKey = ['putApiCashflowId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiCashflowId>>, {id: string;data: PutApiCashflowIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiCashflowId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiCashflowIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiCashflowId>>>
    export type PutApiCashflowIdMutationBody = PutApiCashflowIdBody
    export type PutApiCashflowIdMutationError = void | void | void | void

    /**
 * @summary Atualizar registro
 */
export const usePutApiCashflowId = <TError = void | void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCashflowId>>, TError,{id: string;data: PutApiCashflowIdBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiCashflowId>>,
        TError,
        {id: string;data: PutApiCashflowIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiCashflowIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Remove um registro de fluxo de caixa (apenas ADMIN)
 * @summary Deletar registro
 */
export const deleteApiCashflowId = (
    id: string,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/cashflow/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiCashflowIdMutationOptions = <TError = void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCashflowId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCashflowId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiCashflowId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCashflowId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiCashflowId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCashflowIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCashflowId>>>
    
    export type DeleteApiCashflowIdMutationError = void | void | void

    /**
 * @summary Deletar registro
 */
export const useDeleteApiCashflowId = <TError = void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCashflowId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiCashflowId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiCashflowIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    