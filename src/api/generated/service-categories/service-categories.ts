/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * CRM API GetMoto
 * API para gest√£o de oficina de motos - Sistema de CRM completo
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiServiceCategoriesParams,
  PostApiServiceCategoriesBody,
  PutApiServiceCategoriesIdBody
} from '.././models';

import { customAxiosInstance } from '../../axios-instance';




/**
 * Cadastra uma nova categoria de servi√ßo
 * @summary Criar nova categoria de servi√ßo
 */
export const postApiServiceCategories = (
    postApiServiceCategoriesBody: PostApiServiceCategoriesBody,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/service-categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiServiceCategoriesBody, signal
    },
      );
    }
  


export const getPostApiServiceCategoriesMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiServiceCategories>>, TError,{data: PostApiServiceCategoriesBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiServiceCategories>>, TError,{data: PostApiServiceCategoriesBody}, TContext> => {

const mutationKey = ['postApiServiceCategories'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiServiceCategories>>, {data: PostApiServiceCategoriesBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiServiceCategories(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiServiceCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiServiceCategories>>>
    export type PostApiServiceCategoriesMutationBody = PostApiServiceCategoriesBody
    export type PostApiServiceCategoriesMutationError = void

    /**
 * @summary Criar nova categoria de servi√ßo
 */
export const usePostApiServiceCategories = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiServiceCategories>>, TError,{data: PostApiServiceCategoriesBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiServiceCategories>>,
        TError,
        {data: PostApiServiceCategoriesBody},
        TContext
      > => {

      const mutationOptions = getPostApiServiceCategoriesMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retorna lista de categorias de servi√ßos
 * @summary Listar todas as categorias de servi√ßos
 */
export const getApiServiceCategories = (
    params?: GetApiServiceCategoriesParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/service-categories`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiServiceCategoriesQueryKey = (params?: GetApiServiceCategoriesParams,) => {
    return [
    `/api/service-categories`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiServiceCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getApiServiceCategories>>, TError = unknown>(params?: GetApiServiceCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiServiceCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiServiceCategories>>> = ({ signal }) => getApiServiceCategories(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiServiceCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiServiceCategories>>>
export type GetApiServiceCategoriesQueryError = unknown


export function useGetApiServiceCategories<TData = Awaited<ReturnType<typeof getApiServiceCategories>>, TError = unknown>(
 params: undefined |  GetApiServiceCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiServiceCategories>>,
          TError,
          Awaited<ReturnType<typeof getApiServiceCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiServiceCategories<TData = Awaited<ReturnType<typeof getApiServiceCategories>>, TError = unknown>(
 params?: GetApiServiceCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiServiceCategories>>,
          TError,
          Awaited<ReturnType<typeof getApiServiceCategories>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiServiceCategories<TData = Awaited<ReturnType<typeof getApiServiceCategories>>, TError = unknown>(
 params?: GetApiServiceCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategories>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Listar todas as categorias de servi√ßos
 */

export function useGetApiServiceCategories<TData = Awaited<ReturnType<typeof getApiServiceCategories>>, TError = unknown>(
 params?: GetApiServiceCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategories>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiServiceCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retorna uma categoria espec√≠fica
 * @summary Buscar categoria por ID
 */
export const getApiServiceCategoriesId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/service-categories/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiServiceCategoriesIdQueryKey = (id?: string,) => {
    return [
    `/api/service-categories/${id}`
    ] as const;
    }

    
export const getGetApiServiceCategoriesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError = void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiServiceCategoriesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiServiceCategoriesId>>> = ({ signal }) => getApiServiceCategoriesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiServiceCategoriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiServiceCategoriesId>>>
export type GetApiServiceCategoriesIdQueryError = void


export function useGetApiServiceCategoriesId<TData = Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError = void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiServiceCategoriesId>>,
          TError,
          Awaited<ReturnType<typeof getApiServiceCategoriesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiServiceCategoriesId<TData = Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiServiceCategoriesId>>,
          TError,
          Awaited<ReturnType<typeof getApiServiceCategoriesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiServiceCategoriesId<TData = Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar categoria por ID
 */

export function useGetApiServiceCategoriesId<TData = Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiServiceCategoriesIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Atualiza os dados de uma categoria
 * @summary Atualizar categoria de servi√ßo
 */
export const putApiServiceCategoriesId = (
    id: string,
    putApiServiceCategoriesIdBody: PutApiServiceCategoriesIdBody,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/service-categories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiServiceCategoriesIdBody
    },
      );
    }
  


export const getPutApiServiceCategoriesIdMutationOptions = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiServiceCategoriesId>>, TError,{id: string;data: PutApiServiceCategoriesIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiServiceCategoriesId>>, TError,{id: string;data: PutApiServiceCategoriesIdBody}, TContext> => {

const mutationKey = ['putApiServiceCategoriesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiServiceCategoriesId>>, {id: string;data: PutApiServiceCategoriesIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiServiceCategoriesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiServiceCategoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiServiceCategoriesId>>>
    export type PutApiServiceCategoriesIdMutationBody = PutApiServiceCategoriesIdBody
    export type PutApiServiceCategoriesIdMutationError = void | void

    /**
 * @summary Atualizar categoria de servi√ßo
 */
export const usePutApiServiceCategoriesId = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiServiceCategoriesId>>, TError,{id: string;data: PutApiServiceCategoriesIdBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiServiceCategoriesId>>,
        TError,
        {id: string;data: PutApiServiceCategoriesIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiServiceCategoriesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Desativa uma categoria (soft delete)
 * @summary Deletar categoria de servi√ßo
 */
export const deleteApiServiceCategoriesId = (
    id: string,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/service-categories/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiServiceCategoriesIdMutationOptions = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiServiceCategoriesId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiServiceCategoriesId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiServiceCategoriesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiServiceCategoriesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiServiceCategoriesId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiServiceCategoriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiServiceCategoriesId>>>
    
    export type DeleteApiServiceCategoriesIdMutationError = void | void

    /**
 * @summary Deletar categoria de servi√ßo
 */
export const useDeleteApiServiceCategoriesId = <TError = void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiServiceCategoriesId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiServiceCategoriesId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiServiceCategoriesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retorna categoria com estat√≠sticas de servi√ßos
 * @summary Buscar categoria com estat√≠sticas
 */
export const getApiServiceCategoriesIdStats = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/service-categories/${id}/stats`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiServiceCategoriesIdStatsQueryKey = (id?: string,) => {
    return [
    `/api/service-categories/${id}/stats`
    ] as const;
    }

    
export const getGetApiServiceCategoriesIdStatsQueryOptions = <TData = Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError = void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiServiceCategoriesIdStatsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>> = ({ signal }) => getApiServiceCategoriesIdStats(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiServiceCategoriesIdStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>>
export type GetApiServiceCategoriesIdStatsQueryError = void


export function useGetApiServiceCategoriesIdStats<TData = Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError = void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>,
          TError,
          Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiServiceCategoriesIdStats<TData = Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>,
          TError,
          Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiServiceCategoriesIdStats<TData = Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar categoria com estat√≠sticas
 */

export function useGetApiServiceCategoriesIdStats<TData = Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError = void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiServiceCategoriesIdStats>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiServiceCategoriesIdStatsQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



