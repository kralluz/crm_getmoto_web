/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * CRM API GetMoto
 * API para gestão de oficina de motos - Sistema de CRM completo
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiProductsParams,
  GetApiProductsStockMovementsParams,
  PostApiProductsBody,
  PostApiProductsStockMovementsBody,
  PutApiProductsIdBody
} from '.././models';

import { customAxiosInstance } from '../../axios-instance';




/**
 * Cadastra um novo produto no estoque
 * @summary Criar novo produto
 */
export const postApiProducts = (
    postApiProductsBody: PostApiProductsBody,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/products`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiProductsBody, signal
    },
      );
    }
  


export const getPostApiProductsMutationOptions = <TError = void | void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: PostApiProductsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: PostApiProductsBody}, TContext> => {

const mutationKey = ['postApiProducts'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProducts>>, {data: PostApiProductsBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiProducts(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiProductsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProducts>>>
    export type PostApiProductsMutationBody = PostApiProductsBody
    export type PostApiProductsMutationError = void | void | void | void

    /**
 * @summary Criar novo produto
 */
export const usePostApiProducts = <TError = void | void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProducts>>, TError,{data: PostApiProductsBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiProducts>>,
        TError,
        {data: PostApiProductsBody},
        TContext
      > => {

      const mutationOptions = getPostApiProductsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Obtém lista de produtos com filtros opcionais
 * @summary Listar produtos
 */
export const getApiProducts = (
    params?: GetApiProductsParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/products`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiProductsQueryKey = (params?: GetApiProductsParams,) => {
    return [
    `/api/products`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiProductsQueryOptions = <TData = Awaited<ReturnType<typeof getApiProducts>>, TError = void>(params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProducts>>> = ({ signal }) => getApiProducts(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProducts>>>
export type GetApiProductsQueryError = void


export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = void>(
 params: undefined |  GetApiProductsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProducts>>,
          TError,
          Awaited<ReturnType<typeof getApiProducts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = void>(
 params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProducts>>,
          TError,
          Awaited<ReturnType<typeof getApiProducts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = void>(
 params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Listar produtos
 */

export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = void>(
 params?: GetApiProductsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductsQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retorna dados detalhados de um produto
 * @summary Buscar produto por ID
 */
export const getApiProductsId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/products/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiProductsIdQueryKey = (id?: string,) => {
    return [
    `/api/products/${id}`
    ] as const;
    }

    
export const getGetApiProductsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = void | void>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductsId>>> = ({ signal }) => getApiProductsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductsId>>>
export type GetApiProductsIdQueryError = void | void


export function useGetApiProductsId<TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = void | void>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductsId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductsId<TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductsId>>,
          TError,
          Awaited<ReturnType<typeof getApiProductsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductsId<TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar produto por ID
 */

export function useGetApiProductsId<TData = Awaited<ReturnType<typeof getApiProductsId>>, TError = void | void>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductsIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Atualiza dados de um produto existente
 * @summary Atualizar produto
 */
export const putApiProductsId = (
    id: string,
    putApiProductsIdBody: PutApiProductsIdBody,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/products/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiProductsIdBody
    },
      );
    }
  


export const getPutApiProductsIdMutationOptions = <TError = void | void | void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductsId>>, TError,{id: string;data: PutApiProductsIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiProductsId>>, TError,{id: string;data: PutApiProductsIdBody}, TContext> => {

const mutationKey = ['putApiProductsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiProductsId>>, {id: string;data: PutApiProductsIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiProductsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiProductsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiProductsId>>>
    export type PutApiProductsIdMutationBody = PutApiProductsIdBody
    export type PutApiProductsIdMutationError = void | void | void | void | void

    /**
 * @summary Atualizar produto
 */
export const usePutApiProductsId = <TError = void | void | void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProductsId>>, TError,{id: string;data: PutApiProductsIdBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiProductsId>>,
        TError,
        {id: string;data: PutApiProductsIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiProductsIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Remove um produto do sistema (soft delete)
 * @summary Deletar produto
 */
export const deleteApiProductsId = (
    id: string,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/products/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteApiProductsIdMutationOptions = <TError = void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductsId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductsId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiProductsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiProductsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiProductsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiProductsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiProductsId>>>
    
    export type DeleteApiProductsIdMutationError = void | void | void

    /**
 * @summary Deletar produto
 */
export const useDeleteApiProductsId = <TError = void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProductsId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiProductsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiProductsIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Registra entrada, saída ou ajuste de estoque (apenas ADMIN e MANAGER)
 * @summary Adicionar movimentação de estoque
 */
export const postApiProductsStockMovements = (
    postApiProductsStockMovementsBody: PostApiProductsStockMovementsBody,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/products/stock/movements`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiProductsStockMovementsBody, signal
    },
      );
    }
  


export const getPostApiProductsStockMovementsMutationOptions = <TError = void | void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProductsStockMovements>>, TError,{data: PostApiProductsStockMovementsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiProductsStockMovements>>, TError,{data: PostApiProductsStockMovementsBody}, TContext> => {

const mutationKey = ['postApiProductsStockMovements'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProductsStockMovements>>, {data: PostApiProductsStockMovementsBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiProductsStockMovements(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiProductsStockMovementsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProductsStockMovements>>>
    export type PostApiProductsStockMovementsMutationBody = PostApiProductsStockMovementsBody
    export type PostApiProductsStockMovementsMutationError = void | void | void | void

    /**
 * @summary Adicionar movimentação de estoque
 */
export const usePostApiProductsStockMovements = <TError = void | void | void | void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProductsStockMovements>>, TError,{data: PostApiProductsStockMovementsBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiProductsStockMovements>>,
        TError,
        {data: PostApiProductsStockMovementsBody},
        TContext
      > => {

      const mutationOptions = getPostApiProductsStockMovementsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Retorna histórico de movimentações com filtros opcionais
 * @summary Listar movimentações de estoque
 */
export const getApiProductsStockMovements = (
    params?: GetApiProductsStockMovementsParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/products/stock/movements`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiProductsStockMovementsQueryKey = (params?: GetApiProductsStockMovementsParams,) => {
    return [
    `/api/products/stock/movements`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiProductsStockMovementsQueryOptions = <TData = Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError = void>(params?: GetApiProductsStockMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductsStockMovementsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProductsStockMovements>>> = ({ signal }) => getApiProductsStockMovements(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, gcTime: 600000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductsStockMovementsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProductsStockMovements>>>
export type GetApiProductsStockMovementsQueryError = void


export function useGetApiProductsStockMovements<TData = Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError = void>(
 params: undefined |  GetApiProductsStockMovementsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductsStockMovements>>,
          TError,
          Awaited<ReturnType<typeof getApiProductsStockMovements>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductsStockMovements<TData = Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError = void>(
 params?: GetApiProductsStockMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProductsStockMovements>>,
          TError,
          Awaited<ReturnType<typeof getApiProductsStockMovements>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProductsStockMovements<TData = Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError = void>(
 params?: GetApiProductsStockMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Listar movimentações de estoque
 */

export function useGetApiProductsStockMovements<TData = Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError = void>(
 params?: GetApiProductsStockMovementsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProductsStockMovements>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductsStockMovementsQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



